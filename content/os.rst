Модуль os в Python
####################

:date: 2022-04-19
:summary: Лаба
:status: published
:author: Кауров Р.О.


Модуль os предоставляет функции для работы с операционной системой, при этом поведение функций не зависит от ОС, поэтому программы будут переносимыми. Здесь я расписал часто используемые из них. Модуль позволяет работать с файлами, папками, а так же со многими другими объектами операционной системы, как, например, процессы или переменные окружения.

Давайте разберем функции для работы с файлами:

Работа с файлами
================

.. code-block:: python

  os.chmod(path, mode, *, dir_fd=None, follow_symlinks=True)

Функция меняет права доступа к объекту (mode - восьмеричное число)

.. code-block:: python

  os.remove(path, *, dir_fd=None)

Удаляет путь к файлу. Если будет папка, функция вернет IsADirectoryError. На Windows почему-то файл не удаляется и выбрасывает ошибку, если смотреть в дебаггере.

.. code-block:: python 

  os.rename(src, dst, *, src_dir_fd=None, dst_dir_fd=None)

Переименовывает файл или директорию из src в dst. Не очень разобрался, что дескриптор каталога, но, по-видимому, это поддерживает переименование файла

.. code-block:: python 

  os.renames(old, new)

Переименовывает old в new, создавая промежуточные директории.

.. code-block:: python 

  os.truncate(path, length)

Обрезает файл до длины length.

Пример использования функции:
*****************************

.. code-block:: python 

  import os
  path = 'truncate.txt'
  with open(path, 'w') as f:
  	f.write('truncate data string')
  os.truncate(path, 8) # обрезаем
  with open(path, 'r') as f:
  	print(f.read()) # 'truncate'
  os.unlink(path) # очистка файла


.. code-block:: python 

  os.utime(path, times=None, *, ns=None, dir_fd=None, follow_symlinks=True)

Модификация времени последнего доступа и изменения файла. Либо times - кортеж (время доступа в секундах, время изменения в секундах), либо ns - кортеж (время доступа в наносекундах, время изменения в наносекундах).

Работа с директориями:
======================

.. code-block:: python 

 os.walk(top, topdown=True, onerror=None, followlinks=False)

Генерация имён файлов в дереве каталогов, сверху вниз (если topdown равен True), либо снизу вверх (если False). Для каждого каталога функция walk возвращает кортеж (путь к каталогу, список каталогов (кроме символов '.', '..'), список файлов).

Обратите внимание, что имена в списках не содержат компонентов пути. Чтобы получить полный путь, который начинается с top, к файлу или каталогу в dirpath, выполните:

.. code-block:: python 

 os.path.join(dirpath, name)

.. code-block:: python 

 os.chdir(path)

Смена текущей директории.

.. code-block:: python 

 os.getcwd()

Возвращает строку, содержащую абсолютный путь текущей рабочей директории. 

.. code-block:: python 

 os.rmdir(path, *, dir_fd=None)

Удаляет пустую директорию.

.. code-block:: python 

 os.listdir(path=".")

Возвращает писок файлов и директорий в папке. По умолчанию директория является текущей.

.. code-block:: python 

 os.mkdir(path, mode=0o777, *, dir_fd=None)

Создаёт директорию. OSError, если директория существует.

.. code-block:: python 

 os.makedirs(path, mode=0o777, exist_ok=False)

Создаёт директорию, создавая при этом промежуточные директории.

.. code-block:: python 

 os.removedirs(path)

Удаляет директорию, затем пытается удалить родительские директории, и удаляет их рекурсивно, пока они пусты.

Пример кода для работы с папками:
*********************************

.. code-block:: python 

  import os

  dir_name = 'os_directories'

  print('creating', dir_name)
  os.makedirs(dir_name)

  file_name = os.path.join(dir_name, 'example.txt')
  print('creating', file_name)
  with open(file_name, 'wt') as f:
      f.write('example file')

  print('cleaning up')
  os.unlink(file_name)
  os.rmdir(dir_name)

Функции для работы со ссылками:

.. code-block:: python

  os.symlink(source, link_name, target_is_directory=False, *, dir_fd=None)

Создаёт символическую ссылку на объект.

.. code-block:: python

  os.link(src, dst, *, src_dir_fd=None, dst_dir_fd=None, follow_symlinks=True)

Создаёт жёсткую ссылку.

В чем отличие жесткой ссылки от символической?

СИМВОЛИЧЕСКИЕ ССЫЛКИ
********************

Главное ее отличие от жестких ссылок в том, что при удалении целевого файла ссылка останется, но она будет указывать в никуда, поскольку файла на самом деле больше нет.

Вот основные особенности символических ссылок:

Могут ссылаться на файлы и каталоги;
После удаления, перемещения или переименования файла становятся недействительными;
Права доступа и номер inode отличаются от исходного файла;
При изменении прав доступа для исходного файла, права на ссылку останутся неизменными;
Можно ссылаться на другие разделы диска;
Содержат только имя файла, а не его содержимое.
Теперь давайте рассмотрим жесткие ссылки.

ЖЕСТКИЕ ССЫЛКИ
**************

Этот тип ссылок реализован на более низком уровне файловой системы. Файл размещен только в определенном месте жесткого диска. Но на это место могут ссылаться несколько ссылок из файловой системы. Каждая из ссылок - это отдельный файл, но ведут они к одному участку жесткого диска. Файл можно перемещать между каталогами, и все ссылки останутся рабочими, поскольку для них неважно имя. 

Особенности:
Работают только в пределах одной файловой системы;
Нельзя ссылаться на каталоги;
Имеют ту же информацию inode и набор разрешений что и у исходного файла;
Разрешения на ссылку изменяться при изменении разрешений файла;
Можно перемещать и переименовывать и даже удалять файл без вреда ссылке.


Функции и переменные для работы с ОС:
=====================================

.. code-block:: python 

  os.system(command)

Исполняет системную команду, возвращает код её завершения (0, если успешно).

.. code-block:: python 

 os.name

Переменная имени операционной системы. Доступные значения: 'posix', 'nt', 'mac', 'os2', 'ce', 'java'.

.. code-block:: python 

  os.environ

Словарь переменных окружения. Является изменямым и дополняемым.

.. code-block:: python 

  os.getlogin() 

Возвращает имя пользователя, вошедшего в терминал.

.. code-block:: python

  os.uname()

Возвращает объект с полями: sysname - имя ОС, nodename - имя машины в сети (имя рабочей группы), release - номер релиза, version - версия, machine - идентификатор машины (разрядность). Доступен только в недавних разновидностях UNIX.

.. code-block:: python

  os.chown(path, uid, gid, *, dir_fd=None, follow_symlinks=True)

Меняет id владельца и группы (Unix).

.. code-block:: python

  os.access(path, mode, *, dir_fd=None, effective_ids=False,  follow_symlinks=True) - проверка доступа к объекту у текущего пользователя.
  os.F_OK - объект существует, 
  os.R_OK - доступен на чтение, 
  os.W_OK - доступен на запись, 
  os.X_OK - доступен на исполнение.

Пример использования:

.. code-block:: python

  try:
      fp = open("myfile")
  except PermissionError:
     return "Error"
  else:
      with fp:
         return fp.read()

.. code-block:: python

  os.urandom(n)

Возвращает n случайных байт(!). Полезно, если хотите использовать это в криптографии.

.. code-block:: python

  os.getpid()

Возвращает текущий id процесса.

.. code-block:: python

  os.sync()

Записывает все данные на диск. Доступен только на UNIX.

.. code-block:: python

    os.path - модуль, реализующий некоторые полезные функции на работы с путями.

Задачи на использование функций
*******************************

Задача 1:
~~~~~~~~~

Напишите программу, которая выводит 'Hello, $USER!', где $USER - имя пользователя. Пользоваться print() запрещено.

Задача 2:
~~~~~~~~~

Напишите программу, которая выводит дерево файлов по заданному пути. В ней должны быть:
а) фильтр по названиям
б) вывод типа файла: является ли файл символической ссылкой или является обычным файлом

Задача 3:
~~~~~~~~~

Петя только начал изучать программирование и пока не научился пользоваться командой git clone, поэтому скачал несколько репозиториев с Github в .zip формате. Но вот незадача: файлы программ не являются исполняемыми. Есть несколько .zip архивов, в них содержатся файлы необходимых проектов на языке Python. Напишите программу, которая разархивирует проекты в отдельные папки с тем же названием проектов и сделает все Python файлы исполняемыми.

Задача 4:
~~~~~~~~~

Напишите программу, которая проверяет, есть ли в переменных окружения заданный путь. Если переменная есть, вывести название переменной, если ее нет - создать с именем 'OS_PRACTICE

