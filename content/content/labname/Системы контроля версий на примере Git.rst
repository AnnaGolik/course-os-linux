Системы контроля версий (на примере Git)
############################################
:date: 21.05.2021
:summary: Описание лабы
:author: Соловьёв М.А.

.. default-role:: code
.. contents:: Содержание


Теоретическая часть
====================
**Система контроля версий** — программное обеспечение для облегчения работы с изменяющейся информацией. 
 • Основная задача системы управление версий — это упрощение работы с потоками изменяющейся информации. 
 • Система управления версиями позволяет хранить несколько версий одного и того же документа, при необходимости возвращаться к более ранним версиям, определять, кто и когда сделал то или иное изменение, и многое другое.
 • Какие существуют системы управления версиями:
   1. централизованные - код хранится на сервере, любой имеет доступ к централизованному хранилищу;
   2. децентрализованные (распределенные) - у каждого есть свой репозиторий.

**Git** — одна из распределенных систем контроля версий.
 • Предназначена в основном для работы распределенной команды разработчиков (т.е. разработчики могут находиться в разных концах света и работать над одним проектом).
 • Система Git очень экономична и не требует рассылки большого количества файлов. 

**repository** — некоторое хранилище файлов, ссылок на изменения в файлах

**commit** — отслеживание изменений, сохраняет разницу в изменениях

**HEAD** — (специальный указатель) символическая ссылка на последние изменения, указатель на текущую ветку.
 • Ваше рабочее дерево обычно получается из состояния дерева, на которое ссылается HEAD. HEAD — это ссылка на один из заголовков в вашем хранилище, за исключением случаев использования отдельного HEAD, в этом случае он напрямую ссылается на произвольный commit.
 • Не обязательно ссылается на commit, может указывать на ветвь.
 • Обратите внимание на это различие: «head» (в нижнем регистре) относится к любому из названных заголовков в хранилище; «HEAD» (верхний регистр) относится исключительно к текущему активному заголовку(ссылке).
 • HEAD может указывать на именованную вершину какой-либо ветки или на commit.

**Объекты Git**: Blob, Tree, Commit и References

**working directory** — рабочий каталог на вашем компьютере

**staging area** — область подготовленных файлов или рабочая область

**branch** — ветка, состоит из набора коммитов, обычно ссылается на последний коммит

**merge** — слияние, слияние веток в одну

**pull** — втянуть, взять проект с сервера, получить изменения из удаленного репозитория

**push** — вытолкнуть, отправить изменения на сервер

**Символы**:
 # — в данном случае символ комментария
 <> — угловые скобки, там где вам нужно вписать нужное исключая эти скобки
 $ — приглашение ввода в терминале

**Взаимодействие с другими системами контроля версий**: в стандартной поставке Git поддерживается взаимодействие с CVS (импорт и экспорт, эмуляция CVS-сервера) и Subversion (частичная поддержка импорта и экспорта). 
Стандартный инструмент импорта и экспорта внутри экосистемы — архивы серий версионированных файлов в форматах .tar.gz и .tar.bz2.

**Fork** – удаленная копия репозитория на сервере, отличная от оригинала.

**Clone** – это не то же самое, что и fork. Клон удаленного репозитория располагается локально. Фактически при клонировании копируются все данные, включая историю коммитов и существующие ветки.

**Branch** или создание ветки – это способ внести изменения в проект и объединить их в итоге с остальным кодом. Ветка является частью репозитория.

**Рабочее дерево** (рабочая директория, рабочее пространство) – это дерево исходных файлов, которые вы можете видеть и редактировать.

**Индекс** (область подготовленных файлов, staging area) – это один большой бинарный файл .git/index, в котором указаны все файлы текущей ветки, их SHA1, временные метки и имена. Это не отдельная директория с копиями файлов.

Практическая часть
====================
Для использования системы git вам нужно:

1. Установить программу git на вашей системе.
2. Настроить программу и проверить её работоспособность локально
3. Зарегистрировать ваш аккаунт на GitHub
4. Создать локальный репозиторий или копировать репозиторий существующего проекта
5. Написать файл README.MD.
6. В случае, если вы начинаете проект, создать удаленный репозиторий
7. Фиксировать изменения локально
8. Отправлять изменения на GitHub
9. Зарегистрировать аккаунты разработчиков вашего проекта
10. Выдать им ссылку на проект

1. Установка git
-----------------
.. code-block:: bash

 sudo apt-get update && sudo apt-get upgrade #обновление перед установкой
.. code-block:: bash

 sudo apt-get install git #установка git

Откройте терминал (Ctrl+Alt+T — терминал, если у вас не назначены другие горячие клавиши) и введите:

.. code-block:: bash

 git --version

В случае успешной установки на консоль выведется версия вашего git.

2.Настройка программы Git
--------------------------
*Примечание*:

Следует упомянуть, что настройку Git вы осуществляете на нескольких уровнях.
То есть некоторые настройки вы делаете для определенного пользователя операционной системы (не системы git, а операционной системы). Другие настройки вы делаете для всех пользователей операционной системы. Далее вы можете делать настройки для определенной папки (локально). Вы делаете настройки для репозитория находящегося на сервере. Эти настройки вы можете не делать, если работаете только со своим локальным репозиторием.

Настройка пользователя и емейл:

.. code-block:: bash

  git config --global user.name "My Name"
.. code-block:: bash

 git config --global user.email myEmail@example.com

Чтобы ввести настройки только одного репозитория, перейдите в его папку и сделайте то же без --global.

Настройка внешнего редактора:

.. code-block:: bash

 git config --global core.editor emacs  #подключить внешний редактор emacs

Вы можете выбрать другой текстовый редактор. Например не emacs, a vi или nano или другой на ваше усмотрение.

Настройки git хранятся в файлах.

Git проверяет 4 места для файла конфигурации(здесь в Linux):
Файл вашего компьютера .gitconfig.
Ваш пользовательский, файл вашего пользователя .gitconfig файл находится в ~/.gitconfig.
Второй пользовательский файл конфигурации, расположенный в $ XDG_CONFIG_HOME/git/config или $HOME/.config/git/config.
Конфигурационный файл локального репозитория: .git/config

.. code-block:: bash

 cat .git/config #просмотр конфигурации локального репозитория

Каждый файл добавляет или переопределяет параметры git, определенные в файле над ним.

Вы можете просмотреть файлы конфигурации

(для системы и всех пользователей):

.. code-block:: bash

 git config --system --list

.. code-block:: bash

 git config --system --edit

(для пользователя):

.. code-block:: bash

 git config --global --list

.. code-block:: bash

 git config --global --edit

Проверка настроек вашей конфигурации git:

.. code-block:: bash

 git config --list #вывести на экран конфигурацию.

Если список большой, вы можете пролистывать его с помощью стрелок клавиатуры или «pg up», «pg dn». Для выхода клавиша q.

(какая конфигурация, где установлена):

.. code-block:: bash

 git config --list --show-origin

Команды Git(консольные)
------------------------

**Для чего нужно рассмотреть консольные команды**, ведь существуют UI?
Часто в консоли вы можете сделать, что-то гораздо быстрее. С помощью набора консольных команд вы сами в будущем сможете автоматизировать процесс. Консольные команды более гибкий инструмент. Почему? Да потому что ваш UI может и «не знать» о существовании той или иной команды. UI может вообще отсутствовать как таковой, например на сервере ввиду своей небезопасности. На первом этапе консольные команды во многом помогут в общем понимании того как работает система. Все их запоминать нет необходимости. Вы в любой момент сможете найти справку по той или иной команде. Теоретические знания, без которых никуда, лучше усваиваются с применением на практике... code-block:: bash

 git опции команда аргументы 

Пример:

.. code-block:: bash

 git branch -d <name> # удалить локальную ветку с именем name

.. code-block:: bash

 git branch -d bugFix00 #удалить локальную ветку с именем bugFix00.

*Опции*:

 -C — использовать указанную папку репозитория вместо текущей папки;

 -c параметр=значение — использовать указанное значение параметра конфигурации;

 -p — прокручивать весь вывод с помощью less;

Инициализация локального репозитория.
-------------------------------------

**1**. Переходим в папку проекта.

.. code-block:: bash

 cd ваша_папка #команда терминала, переход в папку с именем ваша_папка

**2**.

.. code-block:: bash

 git init #инициализация локального репозитория

**3**.

.. code-block:: bash

 git add . #тут мы добавляем все.

Можно добавить отдельный файл
Например:

.. code-block:: bash

 git add имя.расширение

Таким образом мы говорим — отслеживать изменения нашего файла.
Для добавления всего в папке рекомендуют использовать следующую команду:

.. code-block:: bash

 git add -A

**4**. Создание commit

.. code-block:: bash

 git commit #сохранить изменения в локальном репозитории

-m «комментарий» #аргумент создания комментария коммиту. Ваши изменения будут уже с осмысленным комментарием.

Вы можете использовать полное имя ключа, вместо его сокращения. К примеру, вместо -m вы можете использовать --message=«комментарий»:

.. code-block:: bash

 git commit --message="$Ваш осмысленный комментарий"

Чтобы использовать русские буквы в комментариях, нужно сделать предварительные настройки. Вам нужно настроить кодировку символов в системе, кодировку символов в текстовом редакторе или IDE, кодировку символов в терминале, кодировку символов в git.

**5**.

.. code-block:: bash

 git show #показать изменения внесенные вашим коммитом

**6**.

.. code-block:: bash

 git status  #просмотр текущего состояний git

Показывает информацию — какая ветка текущая.
Какие файлы изменены и тд. Команда показывает, что находится в рабочей области(в staging area).

Ветки.
-----------------

Ветка(branch) — ссылка на определенный коммит.

Создание ветки:

.. code-block:: bash

 git branch имяВетки #будет создана ветка с именем "имяВетки"

• Используйте для имени латинские буквы. Тут есть одно замечание. Когда мы создали ветку с некоторым именем, текущей осталась ветка, которая была выделена до этого. Ну например master. И если после создания ветки мы скажем git commit, то будет продолжена ветка master. Непонимание этого часто приводит к ошибкам.
• Чтобы продолжить новую ветку нужно её создать, потом переключиться на неё и сделать commit.

**1**. Создаем ветку:

.. code-block:: bash

 git branch feature #создание ветки с именем "feature" локально

**2**. Переключаемся на созданную ветку:

.. code-block:: bash

 git checkout feature#выбор ветки с именем "feature" локально

**3**. Делаем commit:

.. code-block:: bash

 git commit

Теперь у нас есть вторая ветка с именем feature.

Объединение веток (merge).
---------------------------

Объединение веток создает коммит от двух родителей, от текущей ветки и ветки указанной в команде git.

1. Переключаемся на ветку master
2. Сморим какая ветка текущая
3. Объединяем ветки

.. code-block:: bash

 git merge feature  #объединить текущую ветку с веткой feature

Мы можем сделать по другому. Переключиться на ветку feature и объединить её с веткой master:

**1**.

.. code-block:: bash

 git checkout feature #выбор ветки feature 

**2** (в данном случае feature c веткой master):

.. code-block:: bash

 git merge master #объединить текущую ветку

Просмотр доступных веток:

.. code-block:: bash

 git branch -v -a #просмотреть все доступные ветки, которые можно получить

.. code-block:: bash

 git diff --cached #посмотреть какие изменения добавились в stage

stash
-----------
Стек, временное хранилище

Команда

.. code-block:: bash

 git stash

сохраняет все не закомиченные изменения во временное хранилище и сбрасывает состояние ветки до HEAD.

Стеш(stash) предназначен для того, что бы спрятать не нужные на данный момент изменения, потому он и называется stash, в переводе — прятать, припрятывать.

.. code-block:: bash

 git stash apply #применить изменения к текущей версии
 git stash list  #вывести список изменений
 git stash show #вывести последние изменения
 git stash drop #удалить последние изменения в списке 
 git stash pop  # [apply] + [drop]
 git stash clear #очистить список изменений

.. code-block:: bash

 git stash drop# удалит последний git stash

.. code-block:: bash

 git stash drop stash@{5}#удалит git stash под номером 5

Работа с удаленным репозиторием
--------------------------------
Перед использованием удаленного репозитория у вас должен быть локальный проинициализированный репозиторий.
В папке на локальном компьютере:

.. code-block:: bash

 git init #инициализация локального репозитория

.. code-block:: bash

 git add -A

Подключить ветку на удаленном(в данном случае GitHub) компьютере:

.. code-block:: bash

 git remote add origin https://github.com/имя_ник_пользователя/ИмяРепозитория.git

«имя_ник_пользователя» — в данном случае ник пользователя удаленного репозитория.
«ИмяРепозитория» — в данном случае это имя вашего уже созданного заранее репозитория на GitHub

Показать какие пути назначены:

.. code-block:: bash

 git remote -v

Вывод:

.. code-block:: bash

 origin  [url]https://github.com/имя_пользователя/имя_репозитория.git[/url] (fetch)
 origin  [url]https://github.com/имя_пользователя/имя_репозитория.git[/url] (push)


.. code-block:: bash

 git remote show #показать какие ветки есть в удаленном репозитории

Обычно там одна ветка origin.
То есть это не сама ветка, а её сокращенное название ассоциированное с репозиторием.
Вы можете добавить, ассоциировать еще одну ветку на удаленном репозитории.

.. code-block:: bash

 git remote add <сокращенное_имя_удаленного_репозитория> 

.. code-block:: bash

 git@github.com:имя_пользователя/имя_удаленного_репозитория.git

имя_удаленного_реп — имеется в виду короткое имя которое будет ассоциировано с удаленным репозиторием.
имя_удаленного_репозитория — имеется в виду имя репозитория на сервере. То есть имя удаленного репозитория.

.. code-block:: bash

 git remote set-url origin [url]https://имя_пользователя@github.com/имя_пользователя/test.git[/url] #установить новый путь 


.. code-block:: bash

 git pull origin master #забрать все изменения с сервера из ветки origin  в локальную ветку master 

Только данная команда забирает одну ветку из удаленного репозитория.
Кроме того она сливает(объединяет, merge) все изменения из удаленного репозитория с вашими локальными. Эту команду следует применять, когда вы только начинаете работать с удаленным репозиторием и у вас своих наработок в локальном пока нет.

.. code-block:: bash

 git remote -v #показать путь к удаленному репозиторию


.. code-block:: bash

 git clone --recursive https://github.com/имя_пользователя/имя_репозитория.git #рекурсивное получение репозитория


.. code-block:: bash

 git clone --recursive https://github.com/имя_пользователя/имя_удаленного_репозитория.git Lимя_локальной_папки

Эта команда создает папку с именем имя_локальной_папки.
Берет все изменения из репозитория «github.com/имя_пользователя/имя_удаленного_репозитория.git» и сохраняет их в папке «Lимя_локальной_папки».
Здесь я написал префикс L перед именем папки, чтобы отличить локальную папку от удаленной на сервере.

.. code-block:: bash

 gitk #утилита отображения графа изменений

Чтобы некоторые ваши файлы не попадали в репозиторий.
------------------------------------------------------

Вы хотите чтобы некоторые файлы не индексировались и не попадали в репозиторий?
Вам нужно создать файл с именем .gitignore.

.. code-block:: bash

 touch .gitignore #создает пустой файл .gitignore

Пустой созданный файл .gitignore вам ничего не дает. Чтобы некоторые файлы не отправлялись на сервер, вам нужно задать в этом файле правила.
Вы можете скачать готовый файл .gitignore с GitHub. Там есть специальный репозиторий, в котором сохраняются шаблоны .gitignore для разных языков и фреймворков.

По умолчанию файл .gitignore не добавляется в репозиторий.

Вы можете создать глобальный файл для пользователя

.. code-block:: bash

 git config --global core.excludesfile ~/.gitignore_global #создает ссылку на файл .gitignore_global

Теперь вам нужно узнать куда ведет ссылка и создать файл.

.. code-block:: bash

 git config --get core.excludesfile #показывает где должен находиться файл .gitignore_global

Вам осталось создать этот файл. Откройте терминал(В Windows cmd).

.. code-block:: bash

 cd c:\путь\где\должен_находиться_файл .gitignore_global

.. code-block:: bash

 type nul > .gitignore_global #создать пустой файл .gitignore_global

Предупреждение:

.. code-block:: bash

 git push -f #чревато потерей данных при работе с веткой нескольких человек…

.. code-block:: bash

 git push --force #чревато потерей данных при работе с веткой нескольких человек…

.. code-block:: bash

 git fetch #забирает изменения с сервера, но только в локальный репозиторий

Команда fetch забирает данные в ваш локальный репозиторий, но не сливает их с какими-либо вашими наработками и не модифицирует то, над чем вы работаете в данный момент.

.. code-block:: bash

 git pull #берет данные с сервера в локальный репозитория и сливает их с рабочей веткой.

Проще говоря,

.. code-block:: bash

 git pull 

состоит из двух команд:

.. code-block:: bash

 git fetch

и

.. code-block:: bash

 git merge

.

Опции(ключи) -n, --dry-run #многие команды git имеют данные ключи. Эти опции нужны для того чтобы посмотреть какие изменения сделает команда.

То есть, вы можете увидеть результат выполнения данной команды и затем применить её при уверенности без ключей -n, --dry-run

Выводы
========
Я рассмотрел работу системы git и работу с удаленными репозиториями.
В некоторой степени коснулся вопроса установки и конфигурации git, применения git как локально, так и удаленно, а также некоторые моменты организации рабочего процесса.
