Файловый редактор Vim
######################

:date: 2022-02-20 09:00
:summary: Описание лабы
:status: published
:author: Швецова М.А. Максимова К.В.

.. default-role:: code
.. contents:: Содержание


Теоретическая часть
====================

Работа в Vim
-------------

Vim - мощный текстовый редактор с полной свободой настройки и автоматизации.

От многих других редакторов Vim отличается тем, что здесь применяется два основных режима ввода — командный и текстовый. Режимы переключаются вручную, переключение между ними приводит к изменению функционала клавиатурных клавиш. При таком подходе клавиатура используется и для ввода символов, и для перемещения по тексту. Это удобно для переключения между редактированием и просмотром кода. После запуска редактор автоматически открывается в командном режиме.

Для того чтобы создать или открыть файл Vim, введите в командную строку:

.. code-block:: bash

  vim <filename>

В самом файле можно указать путь к python3 или bash, если нужно написать программу.

Также можно сразу применить нужную опцию к файлу при его открытии. Для этого нужно ввести:

.. code-block:: bash

  $ vim опции имя_файла
  
  
Можно применить следующие опции:

  -R — открыть в режиме «только чтение»;
  
  -g — включить графический режим;
  
  -w — сохранить все действия в файл;
  
  -d — найти различия в файлах (потребуется указать несколько файлов для открытия);



Чтобы разрешить запуск программы, нужно написать:

.. code-block:: bash

  chmod +x <filename>

Рассмотрим режимы поподробнее.

**Командный режим**
-------------------

Все введённые символы редактор будет воспринимать как команды. При этом можно дублировать команды, используя цифры. К примеру, если перед введением буквы h нажать цифру 4, то курсор переместится влево не на 1 символ, а сразу на 4. 

*Команды для перемещения по тексту:*

  h или l — переместить курсор влево или вправо на 1 символ;

  j или k — переместить курсор на 1 строку вверх или вниз;

  w или b — переместить курсор на 1 слово влево или вправо;

  G — пролистать до конца файла;

*Команды для вставки и копирования:*

  p или P — вставить текст после курсора или перед ним;

  y — скопировать символ;

  yy или Y — скопировать целую строку.

*Команды для отмены и удаления:*

  u — отменить последнее действие;

  U — отменить последнее действие в указанной строке, где стоит курсор;

  d — удалить символ;
 
  dd — удалить строку целиком;

  D — удалить всё, что находится на участке от курсора до конца строки;

Некоторые команды не работают без указания дополнительных условий. Например, для удаления четырёх символов слева от курсора, нужно задать не просто d, а d4h, — тут мы добавили цифру (количество символов) и команду h (она перемещает курсор влево на 1 символ).

ZZ — сохранить и выйти из редактора.


**Режим вставки (текстовый)**
-----------------------------

Чтобы перейти в этот режим из командного, нужно использовать команду i. 
Любой введённый символ редактор не будет считает командой, а вставит его в текст. 
Чтобы обратно перейти в командный режим, нужно нажать клавишу «Esc».

**Режим командной строки**
-----------

Для включения этого режима пользователь, находясь в командном режиме, должен нажать двоеточие (:). 
Теперь нужно задать конкретную команду для поиска или замены — ввести её и потом нажать клавишу «Enter». Как только она выполнится, Vim автоматически вернётся в командный режим.
В этом режиме можно вводить более “продвинутые” команды, которые позволяют открывать другие файлы и выполнять команды из shell, bash

В режиме работают следующие команды (в начале не забываем ставить двоеточие):

  e файл — создать новый файл;
  
  r файл — вставить содержимое этого файла в текущий файл;
  
  w — сохранить изменения;
  
  r! — задать выполнение команды оболочки и вставку полученного ответа в Vim;
  
  set переменная=значение — задать значение переменной для управления процессами редактора;
  
  q — выйти из Vim;
  
  q! — выйти из Vim, не сохранив изменения.
  
  
**Визуальный режим**
------

Этот режим похож на вышеописанный. 
С помощью команд, используемых вместе со стрелками и командами навигации, пользователь может выделять части текста и затем использовать для них команды командного режима. По сравнению с ним визуальный режим удобнее, потому что здесь разработчик сразу видит, к какому блоку текста применится команда.

Команды визуального режима:
  
  v — переход в посимвольный режим;
  
  V — переход в построчный режим;
  
  CTRL-V — переход в режим визуального блока.


**vimtutor**
------

У vim есть встроенная справочная система. 

Для запуска справки нужно включить командный режим и набрать:

.. code-block:: bash

  $ vimtutor
  
Затем нужно будет нажать :q для выхода из справочника.



Команды Vim
------------

Список самых полезных команд, применимых в обычном режиме работы:

`ZZ` — сохранить документ и выйти из Vim

`ZQ` - выйти без сохранения

`Ctrl` + `u`, `Ctrl` + `d` — прокрутка области просмотра вверх или вниз на полстраницы

`ciw` — (Change Inside Word) удаление текущего слова и автоматический переход в режим вставки

`C` — удалить текст от позиции курсора до конца строки и перейти в режим вставки

`dt<char>` — (Delete To <character>) удалить текст от позиции курсора до следующего вхождения указанного символа

`~` — переключение регистра (верхний/нижний) текущего или выделенного символа

`.` — повтор последней команды

`/` - поиск по файлу

`:q` - закрыть файл

`:wq` - сохранить и закрыть файл

`:!q` - закрыть файл без сохранения изменений

`:w` - сохранить изменения

`:w <newfilename>` - сохранить изменения в новый файл

`:<i>,<j>s/что_заменяем/на_что/` - замена с i по j строку (только первого вхождения)

`:<i>,<j>s/что_заменяем/на_что/g` - замена всех вхождений

`:help` - справка

`:set number` - включить нумерацию строк

`i` - переход в режим вставки с текущей позиции

`a` - переход в режим вставки после курсора

`I` - перемещение в начало строки и переход в режим вставки

`A` - перемещение конец строки и переход в режим вставки

`v`, `V` - переход в визуальный режим (выделяет текст с текущего места)

`Ctrl` + `v`  - выделение блоком

`u`, `U` - откат действий

`Ctrl` + `R` - отмена отката действий

`yw` - скопировать слово

`y` - копирование в буфер обмена

`p` - вставка из буфера обмена после текущего символа

`P` - вставка до текущего символа

`x`, `Delete` - посимвольное удаление

`<число>x` -  удаляет указанное число символов начиная с того который находится под курсором

`dd` - построчное удаление

`/искомое_слово` - поиск слова вперед от текущей позиции

`?искомое_слово` - поиск слов назад от текущей позиции

`n` - продолжение поиска

`N` - возврат к предыдущему найденному слову

`номер_строки` + `Ctrl + G` - переход на указанную строку

`:номер строки` - переход на указанную строку

`:sp` файл - открывает новый файл в текущем терминале, текущий файл при этом остается открытым.

`Ctrl` + `W` - переключение между открытыми файлами одного терминала.

`vimtutor` - выполняется из bash. Представляет собой встроенный краткий курс по vim

`r` `<буква>` (символ) - заменяет букву в тексте под курсором на указанную букву

`w` - переход на одно слово вперед

`2w` - переход на 2 слова вперед. Цифра указывает на сколько слов необходимо перейти.

`b` - переход на одно слово назад

`2b` - переход на 2 слова назад

`gg` - переход в начало файла

`G` - переход в конец файла

`0` - переход в начало строки

`$` - переход в конец строки

`d$` - удаление строки, начиная от текущей позиции и до конца строки

`dd` - удаление всей строки

`d2w` - удаление 2-х первых слов, то есть удаление вперед от текущей позиции

`d2b` - удаление 2-х последних слов, то есть удаление назад от текущей позиции 

Практическая часть
===================

Задачи
------

1. Создайте файл на питоне. Напишите любую программу, сохраните ее, выйдите и запустите.

2. Создайте файл co строкой "AAAAAA". Преобразуйте ее в строку "ABABABABABAB" не используя режим вставки.

3. Откройте файл. Скопируйте строки с 3-й по 5-ю и вставьте в конце текста.
