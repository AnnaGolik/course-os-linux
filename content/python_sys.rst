Python модуль sys
#######################################################

:date: 07-05-2022
:summary: python модуль sys
:status: ???
:author: Исакова В.М.

.. default-role:: code
.. contents:: Содержание

Введение
===========
Любой язык программирования обладает набором дополнительных инструментов, называемых модулями (или библиотеками). Одним из важных модулей Python является библиотека sys. Модуль sys предоставляет программисту набор функций, которые дают информацию о том, как интерпретатор Python взаимодействует с операционной системой. Модуль sys часто используют с модулем os. С помощью sys получают нужную информацию об операционной системе, чтобы избежать непредвиденных ошибок, а с помощью os взаимодействуют с ней (в том числе, работа с файлами, запуск программ на выполнение, обработка путей и так далее. Об этом вы, вероятно, почитаете в лабе про модуль os).

Модуль sys дает следующую информацию:
---------------------------------------------------------------

* Какая версия Python запущена
* Путь к интерпретатору Python, исполняющему текущий скрипт
* Параметры командной строки, используемые при запуске на выполнение скрипта
* Флаги, установленные интерпретатором
* представление значений с плавающей точкой

Подключаем модуль sys
============================

Есть несколько разных команд, с помощью которых это можно сделать. У каждой из них есть свои особенности:

* ``import sys`` - если вы использовали данную команду, то вызов функций или переменных из данного модуля осуществляется так: "sys.имя_функции". (Писать надо чуток побольше, но зато имена функций или переменных в вашем проекте и в модуле могут пересекаться) 
* ``from sys import *`` - При вызове функций можно опустить префикс "sys.", что уменьшает количество кода (но вам надо быть уверенными6 что нет пересечений имен в вашем проекте и в модуле). Звездочку можно заменить на имена конкретных необходимых вам функций, перечисленных через запятую, чтобы не импортировать весь модуль.
* ``import sys as s`` - при такой записи префикс "sys." заменяют на более короткий "s." (и ручками писать меньше, и не надо задумываться о пересечении имен)

Информация о системных параметрах
====================================

sys.dllhandle
---------------------------------------------------------------
*Работает только в операционной системе Windows.*

Целое число, которое определяет дескриптор (указатель на область памяти) динамически подключаемой библиотеки (DLL). По дескриптору можно узнать путь до DLL. Правда для этого нужно подключить еще одну библиотеку - *pywin32*. Установить ее можно командой ``pip install pywin32``. 

Пример использования: 

.. code-block:: python3

	import sys
	import win32api
	print(sys.dllhandle)
	print(win32api.GetModuleFileName(sys.dllhandle))

Вывод на экране:

.. code-block:: python3

	1407778816
	C:\Users\all-python\AppData\Local\Programs\Python\Python36-32\python36.dll

sys.exex_prefix
---------------------------------------------------------------
Строка, которая показывает, в какой каталог установлен Python. Если используется виртуальная среда, значение sys.exex_prefix будет изменено на каталог виртуальной среды. В этом случае узнать путь установки Python можно с помощью base_exec_prefix.

sys.executable
---------------------------------------------------------------
Строка, показывающая абсолютный путь к двоичному исполняемому файлу интерпретатора Python.

sys.getfilesystemencoding()
---------------------------------------------------------------
Функция возвращает кодировку системы

sys.getwindowsversion()
---------------------------------------------------------------
*Работает только в операционной системе Windows.* 

Функция возвращает кортеж из 10 параметров, описывающий, какая версия Windows сейчас запущена:
#. major
#. minor
#. build
#. platform
#. service_pack
#. service_pack_minor
#. service_pack_major
#. suite_mask
#. product_type
#. platform_version

Чтобы получить доступ к определенному компоненту кортежа, достаточно обратиться к нему по индексу (*sys.getwindowsversion()[1]*) или по имени (*sys.getwindowsversion().platform*)

*Примечание:* по индексу можно получить только первые пять элементов

Информация о параметрах интерпретатора:
========================================

sys.hexversion
---------------------------------------------------------------
Номер версии интерпретатора Python, закодированный одним числом. Это число увеличивается с каждой версией, включая все виды релизов. Пример версии: 50856176. Это число называется «hexversion», потому что оно принимает понятный вид, только если его передать в функцию ``hex()``. ``sys.hexversion`` используют, чтобы удостовериться, поддерживает ли интерпретатор какую-либо функцию. Если нет, то функция заменяется каким-либо поддерживаемым аналогом.

sys.version
---------------------------------------------------------------
Это строка, состоящая из номера версии Python, а также дополнительной информации о номере сборки и используемом компиляторе. Выглядит более понятно, чем то, что возвращала предыдущая функция)

Пример:

.. code-block:: python3

	3.8.0 (tags/v3.8.0:fa919fd, Oct 14 2019, 19:21:23) [MSC v.1916 32 bit 
	(Intel)]

sys.copyright
---------------------------------------------------------------
Строка, дающая информацию об авторских правах на интерпретатор Python.

sys.getandroidapilevel()
---------------------------------------------------------------
*Доступно только на платформе Android.* 

Возвращает версию сборки API Android.


sys.int_info
---------------------------------------------------------------
Кортеж, дающий информацию о представлении целых чисел в интерпретаторе Python. Все атрибуты доступны только для чтения.

Пример:

.. code-block:: python3

	sys.int_info(bits_per_digit=15, sizeof_digit=2)

sys.maxunicode
---------------------------------------------------------------
Число, показывающее, какое максимальное количество битов может выделяться на представление символа Unicode. 


sys.argv
---------------------------------------------------------------
Список, состоящий из аргументов командной строки, которые используются в текущем сценарии Python.
argv[0] — это имя скрипта. Если имя скрипта не было передано интерпретатору, то argv[0] будет пустой строкой.

sys.hash_info
---------------------------------------------------------------
Кортеж, содержащий информацию о параметрах хеша. Атрибуты:
#. ``width`` - Сколько битов используется для значений хеша
#. ``modulus`` - Простой модуль, используемое для числовой схемы хеша
#. ``inf`` - Значение хеша, возвращаемое для +∞
#. ``nan`` - Значение хеша, возвращаемое для типа nan
#. ``imag`` - Множитель, который используется для представления мнимой части комплексного числа
#. `algorithm`` - Наименование алгоритма, используемого для хеширования строк, байтов и представления памяти
#. ``hash_bits`` - Внутренний размер вывода алгоритма хеширования
#. ``seed_bits`` - Размер начального ключа алгоритма хеширования

Пример вывода:

.. code-block:: python3

	sys.hash_info(width=32, modulus=2147483647, inf=314159, nan=0, 
	imag=1000003, algorithm='siphash24', hash_bits=64, seed_bits=128, 
	cutoff=0)

Немного информации про модули, доступные интерпретатору:
========================================================

sys.builtin_module_names
---------------------------------------------------------------
Кортеж, который показывает все доступные интерпретатору Python модули, любые другие инструменты могут показать лишь список импортированных в скрипт модулей.

sys.modules
---------------------------------------------------------------
Словарь, дающий информацию о загруженных в скрипт модулях. Его можно изменять (в предыдущем случае был словарь, а словари - неизменяемы), чтобы принудительно перезагружать или удалять модули, однако эти манипуляции могут привести к сбою Python.

sys.path
---------------------------------------------------------------
Список строк, который показывает, в каких директориях ищутся модули. Инициализируется из переменной среды PYTHONPATH и установок по умолчанию.
Первый элемент списка (path[0]) — это директория, в которой находится скрипт, запускающий интерпретатор Python.
Этот список может изменяться программой. В sys.path могут быть добавлены только строки и байтовые строки, другие типы данных игнорируются при импорте.


Неожиданное воспоминание о рекурсии:
=======================================

sys.getrecursionlimit()
---------------------------------------------------------------
Еще не забыли задачку про вычисление чисел Фиббоначи?) Одним из ее возможных решений является использование рекурсии, но если попытаться таким образом вычислить какое-нибудь большое число, то вероятно вы получите сбой Python. Функция ``sys.getrecursionlimit()`` возвращает максимально возможное значение рекурсии и максимальную глубину стека интерпретатора. Установить предел рекурсии можно с помощью функции ``setrecursionlimit()``.

sys.setrecursionlimit(предел)
---------------------------------------------------------------
Функция, позволяющая установить предел глубины рекурсии для интерпретатора Python. Максимальный предел рекурсии зависит от платформы. Пользователь может установить большой предел, если он требуется приложению и поддерживается платформой, однако нужно быть осторожным, иначе слишком большой предел может привести к крашу программы.

Выход из Python.
==================

sys.exit([arg])
---------------------------------------------------------------
Вызывает исключение SystemExit, которое можно перехватить. По желанию можно передать функции аргумент, который может быть целым числом (обычно от 0 до 127).
Если передан ноль, завершение работы происходит в обычном режиме, любое другое значение приводит к «неуспешному завершению». Если аргумент не входит в нужный числовой диапазон, функция может вернуть неопределённые результаты. Некоторые программисты придерживают определённых правил при указании значения аргумента, например, «2» может обозначать выход из-за синтаксической ошибки, а «3» — выход из-за переполнения стека.
sys.exit — это быстрый способ выйти из программы при возникновении ошибки.

Информация о потоках:
===================================================

sys.stdin
---------------------------------------------------------------
Стандартный поток ввода, который используется для интерактивного ввода, включая вызовы input(). Файло-подобный объект, считывать данные можно с помощью его метода read.

sys.stdout
---------------------------------------------------------------
Стандартный поток вывода, который используется для вывода функции print(), выражений и запросов input(). Файло-подобный объект, записывать данные в него можно с помощью его метода write.

sys.stderr
---------------------------------------------------------------
Стандартный поток вывода ошибок, в который отправляются все ошибки интерпретатора. Файло-подобный объект, считывать данные можно с помощью его метода read.

sys._current_frames()
---------------------------------------------------------------
Возвращает словарь, дающий информацию о активных потоках.

sys.getswitchinterval()
---------------------------------------------------------------
Возвращает число, определяющее, частоту переключения потоков. Это вещественное число. Значение в секундах.

sys.setswitchinterval(интервал)
---------------------------------------------------------------
Если вы хотите поменять частоту переподключения потоков, то можно использовать эту функцию.

Подробнее о потоках можно прочитать в теории к 3 лабораторной работе.


Практическая часть:
====================
#. Подключите библиотеку sys
#. Определите кодировку вашей системы
#. Определите путь до библиотеки Numpy
#. Создайте два файла. Запишите в один файл все доступные интерпретатору Python модули, а в другой - список импортированных в скрипт (например, написанный для выполнения задания два) модулей.
#. Выведите на экран абсолютные пути для этих файлов
#. Выведите на экран номер версии вашего интерпретатора Python

Контрольные вопросы:
=====================
#. Какую информацию можно получить с помощью модуля sys?
#. Как с помощью дескриптора получить путь до DLL?
#. Почему решение задачи о вычислении чисел Фиббоначи с помощью рекурсии может привести к сбою Python?
#. Какую информацию можно узнать с помощью функций библиотеки sys о стандартных потоках ввода и вывода?

Список использованных источников:
=================================

* https://all-python.ru/osnovy/sys.html
* https://pythonworld.ru/moduli/modul-sys.html
* https://pythonim.ru/moduli/sys-python
