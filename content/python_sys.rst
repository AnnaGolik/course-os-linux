Python модуль sys
#######################################################

:date: 07-05-2022
:summary: python модуль sys
:status: published
:author: Исакова В.М.

.. default-role:: code
.. contents:: Содержание

Введение
===========
Любой язык программирования обладает набором дополнительных инструментов, называемых модулями (или библиотеками). Одним из важных модулей Python является библиотека sys. Модуль sys предоставляет программисту набор функций, которые дают информацию о том, как интерпретатор Python взаимодействует с операционной системой. Модуль sys часто используют с модулем os. С помощью sys получают нужную информацию об операционной системе, чтобы избежать непредвиденных ошибок, а с помощью os взаимодействуют с ней (работа с файлами, запуск программ на выполнение, обработка путей и так далее).

Модуль sys дает следующую информацию:
---------------------------------------------------------------

* Какая версия Python запущена
* Путь к интерпретатору Python, исполняющему текущий скрипт
* Параметры командной строки, используемые при запуске на выполнение скрипта
* Флаги, установленные интерпретатором
* представление значений с плавающей точкой

Подключаем модуль sys
============================

Есть несколько разных команд, с помощью которых это можно сделать. У каждой из них есть свои особенности:

* ``import sys`` - если вы использовали данную команду, то вызов функций или переменных из данного модуля осуществляется так: "sys.имя_функции". (Писать надо чуток побольше, но зато имена функций или переменных в вашем проекте и в модуле могут пересекаться) 
* ``from sys import *`` - При вызове функций можно опустить префикс "sys.", что уменьшает количество кода (но вам надо быть уверенными6 что нет пересечений имен в вашем проекте и в модуле). Звездочку можно заменить на имена конкретных необходимых вам функций, перечисленных через запятую, чтобы не импортировать весь модуль.
* ``import sys as s`` - при такой записи префикс "sys." заменяют на более короткий "s." (и ручками писать меньше и не надо задумываться о пересечении имен)

Информация о системных параметрах
====================================

sys.dllhandle
---------------
*Работает только в операционной системе Windows.*
Целое число, которое определяет дескриптор (указатель на область памяти) динамически подключаемой библиотеки (DLL). По дескриптору можно узнать путь до DLL. Правда для этого нужно подключить еще одну библиотеку - *pywin32*. Установить ее можно командой ``pip install pywin32``. 

Пример использования: 

.. code-block:: python 3

	import sys
	import win32api
	print(sys.dllhandle)
	print(win32api.GetModuleFileName(sys.dllhandle))

	1407778816
	C:\Users\all-python\AppData\Local\Programs\Python\Python36-32\python36.dll

sys.exex_prefix
---------------
Строка, которая показывает, в какой каталог установлен Python. Если используется виртуальная среда, значение sys.exex_prefix будет изменено на каталог виртуальной среды. В этом случае узнать путь установки Python можно с помощью base_exec_prefix.

sys.executable
---------------
Строка, показывающая абсолютный путь к двоичному исполняемому файлу интерпретатора Python.

sys.getfilesystemencoding()
-----------------------------
Функция возвращает кодировку системы

Практическая часть:
====================
#. Подключите библиотеку sys
#. Определите путь до библиотеки Numpy (если у вас Windows)

Контрольные вопросы:
=====================
#. Какую информацию можно получить с помощью модуля sys?

Список использованных источников:
=================================

* https://all-python.ru/osnovy/sys.html
