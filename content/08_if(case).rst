Ветвление в Bash (case, if)
\\\\\\\\\\\\\\\\\\\\\\\\\\\
:date: 2022-05-13
:summary: Описание лабы
:status: published
:author: Пяткова Р.А.


.. contents:: Содержание

Теоретическая часть
=====================

If-предложения в Bash очень похожи на аналогичные в других языках. Они следуют базовой форме:
::

  if [[ "$some_variable" == "good input" ]]; then
   echo "You got the right input."
  elif [[ "$some_variable" == "ok input" ]]; then
   echo "Close enough"
  else
   echo "No way, young programmer."
  fi

Если переводить команды на простой язык, то можно сказать так: Если (if) что-то является истиной, тогда (then) выполни вот это. В противном случае проверяй другие условия по порядку и делай то же самое. Если ни одно из условий не сработало, выполни последнее указание.

Булевы операторы ! (нет), && (и), || (или) могут использоваться для комбинирования выражений, как и в других языках. Операторы **;** , **&&**, **||** используются для выполнения команд в определенной последовательности. Оператор **;** выполняет следующую команду независимо от результата предыдущей, **&&** выполняет следующую команду только после успешного выполнения предыдущей (**логическое и**), а **||** выполняется только после неудачного выполнения предыдущей команды (**логическое или**).

Еще один пример скрипта:
::
   # Однострочная запись
   if [ ... ]; then echo "true"; else echo "false"; fi;
   ## Вложенные условия
   if [ ... ] && [ ... ]; then
     ...
   elif [[ ... && ... ]]; then
     ...
   else
     ...
   fi;
-----

А теперь разберемся с самым сложным моментом в данной теме... скобки!!!
Порой вам встретятся двойные квадратные скобки, как в примере выше. А порой они будут одинарными. В чем подвох?)
::
  if [ "$age" -gt 30 ]; then
   echo "What an oldy."
  fi
  
Иногда скобки могут быть круглыми
::
  if (( age > 30 )); then
   echo "Hey, 30 is the new 20, right?"
  fi
  
Давайте разберемся, что здесь происходит. Вот шаблон того, что происходит на самом деле:
::
  if ANY_COMMAND_YOU_WANT_AT_ALL; then
   # ... stuff to do
  fi
  
Все верно: содержимое сразу после if может быть вообще любой командой, если она дает код выхода (а практически всегда так и бывает). Если команда возвращает код выхода 0 (в Bash это код успешно выполненной операции), тогда запускается код внутри ветки then. В противном случае Bash переходит к следующей ветке и делает новую попытку.

Но, погодите, это означает, что…

Ага. «[» это команда. Это, собственно, синтаксический сахар для встроенной команды test, которая проверяет и сравнивает переданные ей аргументы. «]» это на самом деле аргумент для команды [, который говорит ей прекратить проверять аргументы!

Что касается двойных скобок, то  [[ двойные квадратные скобки ]] и ((двойные круглые скобки)) это не совсем команды. Они представляют собой ключевые слова языка Bash, в результате чего они ведут себя немного более предсказуемо. Тем не менее, в зависимости от своего содержимого, они по-прежнему возвращают код выхода.

[[ Двойные квадратные скобки ]] работают в целом так же, как и [одинарные квадратные скобки], но имеют дополнительные возможности вроде лучшей поддержки регулярных выражений.

(( Двойные круглые скобки )) это конструкция, позволяющая осуществлять арифметические вычисления внутри Bash. Вам даже не нужно использовать их с if-предложением.
::
  if (( 5 > 3 )); then
   echo "Numbers make sense."
  elif (( 3 <= 2 )); then
   echo "3 is less than or equal to 2. wat."
  else
   echo "Hwwaaa"
  fi
 
.. **warning**:: Обратите внимание, что ``[``, условие и ``]`` обязательно должны быть разделены пробелами, иначе оболочка воспримет в качестве команды ``[условие``.

Далее приведем таблицу с возможными условиями сравнения:
::

   # Работа с файлами
   -e    Проверить существует ли файл или директория (-f, -d)
   -f    Файл существует (!-f -- не существует)
   -d    Каталог существует (!-d -- не существует)
   -s    Файл существует и он не пустой
   -r    Файл существует и доступен для чтения
   -w    ... для записи
   -x    ... для выполнения
   -h    cимвольная ссылка

   # Работа со строками
   -z    Пустая строка
   -n    Не Пустая строка
   ==    Равно
   !=    Не равно

   # Операции с числами
   -eq   Равно
   -ne   Не равно
   -lt   Меньше
   -le   Меньше или равно
   -gt   Больше
   -ge   Больше или равно

Если необходимо сделать выбор из нескольких альтернатив, пригодится оператор ``case``. Принцип его работы легче понять на примере:
::

  case "$extension" in
      (jpg|jpeg)
          echo "Это изображение в формате jpeg.";;
      png)
          echо "Это изображение в формате png";;
      gif)
           echo "А это ))" ;;
      *)
          echo "Оу!Это вообще не изображение!";;
  esac

В примере оператор проверяет значение переменной ``$extension`` на совпадение с одним из шаблонов и в случае совпадения выполнит соответствующий блок кода. Если же совпадений не будет, выполнятся указания, соответствующие шаблону ``*``.


-----

Также можно создавать сложные условные конструкции, используя вложенные условия. 
Например:
:: 

    #!/bin/bash
    echo "Введите производителя ноутбуков"
    read brand
    if [[ $brand == "Asus" ]] || [[ $brand == "Lenovo" ]] || [[ $brand == "Huawei" ]] || [[ $brand == "cropp" ]] ; then
        case $brand in
            Asus)
                echo "Скидка на ноутбуки $brand - 20%" ;;
            Lenovo)
                echo "Скидка на телефоны $brand - 10%" ;;
            Huawei)
                echo "Скидка на телефоны $brand - 5%" ;;
            *)
                echo "На этот вид товара нет скидок" ;;
        esac
    else
        echo " $brand - это не производитель ноутбуков"
    fi
    
Или можно написать аналогичный скрипт, используя только ``if``:
::

  #!/bin/bash
  echo "Введите производителя ноутбуков"
  read brand
  if [[ $brand == "Asus" ]] || [[ $brand == "Lenovo" ]] || [[ $brand == "Huawei" ]] || [[ $brand == "cropp" ]] ; then
      if [[ $brand == Asus ]] ; then
          echo "Скидка на ноутбуки $brand - 20%" 
      elif [[ $brand == Lenovo ]] ; then
          echo "Скидка на ноутбуки $brand - 10%" 
      elif [[ $brand == Huawei ]] ; then
          echo "Скидка на ноутбуки $brand - 5%"
      else 
          echo "На этот вид товара нет скидок" 
      fi
  else
      echo " $brand - это не производитель ноутбуков"
  fi

Практическая часть
===================

Задачи
-------------

Наибольшее число
~~~~~~~~~~~~~~~~~~~~~
Напишите скрипт, который будет принимать на вход три числа и печатать наибольшее из них

Предсказывание будущего
~~~~~~~~~~~~~~~~~
Вам подарили на день рождения волшебный цветок, который будет расти только при опредленных условиях. Условия таковы: плотность почвы должна быть больше 10, цвет горшка красным и в доме должно быть больше трех животных. Вам на вход подаются данные: плотность почвы, цвет горшка и количество живоотных. Предскажите, погибнет ли цветок? 

Египетский треугольник
~~~~~~~~~~~~~~~~~~~~~~~
Напишите скрипт, который считывае длины двух катетов, затем длину гипотенузы и проверяет является ли данный треугольник египетским.

Проверим, что вы запомнили:)
-------------

1) Для чего используется каждый из этих операторов: **;** , **&&**, **||**?

2) Расскажите, в каких случаях испольуется каждый из видов скобок?

3) В каких случаях мы используем опреатор "case"?

4) Опишите примерную схему работы опраторов if, elif, else

