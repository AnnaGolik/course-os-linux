Модуль sys в Python
####

:Number: Экстра
:Theme: Модуль sys
:Author: Сидоров Д.В. 

.. default-role:: code
.. contents:: Содержание

Теоретическая часть
====

Если говорить простыми словами, модуль - инструмент, с помощью которого можно повышать сложность реализуемой задачи. Модуль sys является одним из таких и входит в состав дистрибутива Python.

Модуль sys предоставляет программисту набор функций, которые дают информацию о том, как интерпретатор Python взаимодействует с операционной системой. Функции, предоставляемые модулем sys, позволяют нам работать с базовым интерпретатором, независимо от того, является ли он платформой Windows, Macintosh или Linux.

**Какую информацию можно получить:**

* Какая версия Python запущена
* Путь к интерпретатору Python, исполняющему текущий скрипт
* Параметры командной строки, используемые при запуске на выполнение скрипта
* Флаги, установленные интерпретатором
* Очень много другого

Модуль sys часто используют с модулем os. С помощью sys получают нужную информацию об операционной системе, чтобы избежать непредвиденных ошибок, а с помощью os взаимодействуют с ней (работа с файлами, запуск программ на выполнение, обработка путей и так далее).

Подключение
====

Как Вы знаете, все библиотеки в Python 3 подключаются с использованием команды "import". Существуют разные варианты подключения. Можно подключить только некоторые части модуля с использованием form, можно сократить название as s. 

.. code-block:: python

  import sys
  
Библиотека sys позволяет программисту получать информацию об интерпретаторе Python и операционной системе, работать с вводом и выводом, менять параметры модуля и обрабатывать возникающие ошибки.

Функции и константы модуля
====

**sys.exec_prefix**

Показывает, в какой каталог установлен Python. Если используется виртуальная среда, значение sys.exec_prefix будет изменено на каталог виртуальной среды. В этом случае узнать путь установки Python можно с помощью base_exec_prefix.

**sys.executable**

Строка, показывающая абсолютный путь к двоичному исполняемому файлу интерпретатора Python.

**sys.getwindowsversion()**

Функция работает только с Windows. Она возвращает кортеж, описывающий, какая версия Windows сейчас запущена. Кортеж содержит до10 элементов, показывающих различную информацию об операционной системе (версия сборки, версия платформы и другая информация).

.. code-block:: python

  import sys
  print(sys.getwindowsversion())
  print(sys.getwindowsversion().platform_version)

  sys.getwindowsversion(major=10, minor=0, build=17763, platform=2, 
                      service_pack='')
  (10, 0, 17763)
  
**sys.platform**

Строка, дающая информацию об используемой операционной системе (идентификатор платформы). Например, «win32».

**sys.winver**

Содержит номер версии Python, который используется в реестре Windows. Например, «3.8-32».

**sys.builtin_module_names**

Кортеж, который показывает все доступные интерпретатору Python модули. Что интересно, sys.builtin_module_names — единственный способ получить эту информацию, любые другие инструменты могут показать лишь список импортированных в скрипт модулей.

**sys.getandroidapilevel()**

Доступно только на платформе Android. Возвращает версию сборки API Android.

**sys.getrecursionlimit()**

Возвращает максимально возможное значение рекурсии и максимальную глубину стека интерпретатора. Этот предел предотвращает переполнение стека, который в свою очередь приводит к сбою Python. Установить предел рекурсии можно с помощью функции setrecursionlimit().

**sys.hash_info**

.. table:: Значение параметров

  ==========     ===========================================================================================
  Атрибут        Объяснение
  ==========     ===========================================================================================
  width          Сколько битов используется для значений хеша
  modulus        Простой модуль, используемое для числовой схемы хеша
  inf            Значение хеша, возвращаемое для +∞
  nan            Значение хеша, возвращаемое для типа nan
  imag           Множитель, который используется для представления мнимой части комплексного числа
  algorithm      Наименование алгоритма, используемого для хеширования строк, байтов и представления памяти
  hash_bits      Внутренний размер вывода алгоритма хеширования
  seed_bits      Размер начального ключа алгоритма хеширования
  ==========     ===========================================================================================
  
Рассмотри мпример вывода:

.. code-block:: python
  
  sys.hash_info(width=32, modulus=2147483647, inf=314159, nan=0, 
  imag=1000003, algorithm='siphash24', hash_bits=64, seed_bits=128, 
  cutoff=0)
  
**sys.implementation**

Объект, дающий информацию о запущенном в данный момент интерпретаторе Python.

**sys.maxsize**

Число, показывающее, какое максимально значение может принять переменная типа Py_ssize_t. Это также максимальный размер списков, словарей, строк и других контейнеров.

**sys.setrecursionlimit(предел)**

Функция, позволяющая установить предел глубины рекурсии для интерпретатора Python.

Задачи для самостоятельного решения
====

1. Проверьте, в какой каталог у Вас установлен Python
2. regrgrtrt
